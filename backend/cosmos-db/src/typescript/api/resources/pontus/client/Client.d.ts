/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PvpmartinsApi from "../../..";
export declare namespace Pontus {
    interface Options {
        environment?: core.Supplier<environments.PvpmartinsApiEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Pontus {
    protected readonly _options: Pontus.Options;
    constructor(_options: Pontus.Options);
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuCreatePost(request: PvpmartinsApi.MenuCreateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.MenuCreateRes>;
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuReadPost(request: PvpmartinsApi.MenuReadReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.MenuReadRes>;
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuUpdatePost(request: PvpmartinsApi.MenuUpdateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.MenuUpdateRes>;
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuDeletePost(request: PvpmartinsApi.MenuDeleteReq, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Create a new table with properties and associated columns
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableCreatePost(request: PvpmartinsApi.TableCreateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TableCreateRes>;
    /**
     * Get table by id
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableReadPost(request: PvpmartinsApi.TableReadReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TableReadRes>;
    /**
     * Update table properties and associated columns by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableUpdatePost(request: PvpmartinsApi.TableUpdateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TableUpdateRes>;
    /**
     * Delete a table by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDeletePost(request: PvpmartinsApi.TableDeleteReq, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Retrieve all tables with pagination and search
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tablesReadPost(request: PvpmartinsApi.ReadPaginationFilter, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TablesReadRes>;
    /**
     * Create a new row data, by using key/value pair for each column.
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataCreatePost(request: PvpmartinsApi.TableDataCreateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TableDataCreateRes>;
    /**
     *
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.UnauthorizedError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataReadPost(request: PvpmartinsApi.TableDataReadReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TableDataReadRes>;
    /**
     * Update a row data, by using key/value pair for each column.
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataUpdatePost(request: PvpmartinsApi.TableDataUpdateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.TableDataUpdateRes>;
    /**
     * Update a row data, by using key/value pair for each column.
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataDeletePost(request: PvpmartinsApi.TableDataDeleteReq, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Create a new dashboard with properties, auth group, folder, and owner
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardCreatePost(request: PvpmartinsApi.DashboardCreateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardCreateRes>;
    /**
     * Retrieve dashboard by id
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardReadPost(request: PvpmartinsApi.DashboardReadReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardReadRes>;
    /**
     * Update dashboard properties, auth group, folder, and owner by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardUpdatePost(request: PvpmartinsApi.DashboardUpdateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardUpdateRes>;
    /**
     * Delete a dashboard by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardDeletePost(request: PvpmartinsApi.DashboardDeleteReq, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthCreatePost(request?: PvpmartinsApi.AuthCreateBody, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardAuthGroup>;
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthReadPost(request?: PvpmartinsApi.AuthReadBody, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardAuthGroup>;
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthUpdatePost(request?: PvpmartinsApi.AuthUpdateBody, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardAuthGroup>;
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthDeletePost(request: PvpmartinsApi.AuthDeleteBody, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.AuthDeleteBody>;
    /**
     * Retrieve all dashboards with pagination and search
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardsReadPost(request: PvpmartinsApi.DashboardsReadReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.DashboardsReadRes>;
    /**
     * Create a new group with a name, parents, and symlinks
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupCreatePost(request?: PvpmartinsApi.GroupCreateReq, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.AuthGroupRef>;
    /**
     * Retrieve group by id
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupReadPost(request?: PvpmartinsApi.GroupReadBody, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.AuthGroupRef>;
    /**
     * Update group details by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupUpdatePost(request?: PvpmartinsApi.GroupUpdateReq, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Delete a group by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupDeletePost(request?: PvpmartinsApi.GroupDeleteReq, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Retrieve all groups (nodes that Aggrid is using a new pagination filter model
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupsReadPost(request: PvpmartinsApi.ReadPaginationFilter, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.InlineResponse2001>;
    /**
     * Retrieve all users
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUsersReadPost(request: PvpmartinsApi.ReadPaginationFilter, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.InlineResponse2002>;
    /**
     * Create a new user with a name and associated groups
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserCreatePost(request?: PvpmartinsApi.NewUser, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.User>;
    /**
     * Update user details by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserUpdatePost(request?: PvpmartinsApi.UpdateUser, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Delete a user by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserDeletePost(request?: PvpmartinsApi.DeleteUser, requestOptions?: Pontus.RequestOptions): Promise<void>;
    /**
     * Retrieve user by ID
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserReadPost(request?: PvpmartinsApi.UserReadBody, requestOptions?: Pontus.RequestOptions): Promise<PvpmartinsApi.User>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
