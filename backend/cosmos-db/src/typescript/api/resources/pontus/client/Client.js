"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pontus = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const PvpmartinsApi = __importStar(require("../../.."));
const serializers = __importStar(require("../../../../serialization"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors"));
class Pontus {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuCreatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/menu/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.MenuCreateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.MenuCreateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/menu/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.MenuReadReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.MenuReadRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuUpdatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/menu/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.MenuUpdateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.MenuUpdateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    menuDeletePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/menu/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.MenuDeleteReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new table with properties and associated columns
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableCreatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableCreateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TableCreateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get table by id
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableReadReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TableReadRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update table properties and associated columns by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableUpdatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableUpdateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TableUpdateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Delete a table by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDeletePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableDeleteReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve all tables with pagination and search
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tablesReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/tables/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.ReadPaginationFilter.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TablesReadRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new row data, by using key/value pair for each column.
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataCreatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/data/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableDataCreateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TableDataCreateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     *
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.UnauthorizedError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/data/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableDataReadReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TableDataReadRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 401:
                        throw new PvpmartinsApi.UnauthorizedError(_response.error.body);
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update a row data, by using key/value pair for each column.
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataUpdatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/data/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableDataUpdateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.TableDataUpdateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update a row data, by using key/value pair for each column.
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    tableDataDeletePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/table/data/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.TableDataDeleteReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new dashboard with properties, auth group, folder, and owner
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardCreatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.DashboardCreateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardCreateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve dashboard by id
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.DashboardReadReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardReadRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update dashboard properties, auth group, folder, and owner by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardUpdatePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.DashboardUpdateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardUpdateRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Delete a dashboard by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardDeletePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.DashboardDeleteReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthCreatePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/group/auth/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.AuthCreateBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardAuthGroup.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthReadPost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/group/auth/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.AuthReadBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardAuthGroup.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthUpdatePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/group/auth/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.AuthUpdateBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardAuthGroup.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new dashboard state with name and state information
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardGroupAuthDeletePost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboard/group/auth/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.AuthDeleteBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AuthDeleteBody.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve all dashboards with pagination and search
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    dashboardsReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/dashboards/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.DashboardsReadReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.DashboardsReadRes.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new group with a name, parents, and symlinks
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupCreatePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/group/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.GroupCreateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AuthGroupRef.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve group by id
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupReadPost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/group/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.GroupReadBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.AuthGroupRef.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update group details by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupUpdatePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/group/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.GroupUpdateReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Delete a group by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupDeletePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/group/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.GroupDeleteReq.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve all groups (nodes that Aggrid is using a new pagination filter model
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authGroupsReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/groups/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.ReadPaginationFilter.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.InlineResponse2001.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve all users
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUsersReadPost(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/users/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.ReadPaginationFilter.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.InlineResponse2002.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Create a new user with a name and associated groups
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserCreatePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/user/create"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.NewUser.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.User.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Update user details by ID
     * @throws {@link PvpmartinsApi.BadRequestError}
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserUpdatePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/user/update"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.UpdateUser.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 400:
                        throw new PvpmartinsApi.BadRequestError(_response.error.body);
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Delete a user by ID
     * @throws {@link PvpmartinsApi.NotFoundError}
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserDeletePost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/user/delete"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.DeleteUser.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new PvpmartinsApi.NotFoundError(_response.error.body);
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Retrieve user by ID
     * @throws {@link PvpmartinsApi.InternalServerError}
     */
    authUserReadPost(request = {}, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_a = (yield core.Supplier.get(this._options.environment))) !== null && _a !== void 0 ? _a : environments.PvpmartinsApiEnvironment.Default, "/PontusTest/1.0.0/auth/user/read"),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                },
                contentType: "application/json",
                body: yield serializers.UserReadBody.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.User.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 500:
                        throw new PvpmartinsApi.InternalServerError(_response.error.body);
                    default:
                        throw new errors.PvpmartinsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.PvpmartinsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.PvpmartinsApiTimeoutError();
                case "unknown":
                    throw new errors.PvpmartinsApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            const bearer = yield core.Supplier.get(this._options.token);
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Pontus = Pontus;
