/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as PvpmartinsApi from "../../..";
import express from "express";
export interface PontusServiceMethods {
    menuCreatePost(req: express.Request<never, PvpmartinsApi.MenuCreateRes, PvpmartinsApi.MenuCreateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.MenuCreateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    menuReadPost(req: express.Request<never, PvpmartinsApi.MenuReadRes, PvpmartinsApi.MenuReadReq, never>, res: {
        send: (responseBody: PvpmartinsApi.MenuReadRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    menuUpdatePost(req: express.Request<never, PvpmartinsApi.MenuUpdateRes, PvpmartinsApi.MenuUpdateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.MenuUpdateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    menuDeletePost(req: express.Request<never, never, PvpmartinsApi.MenuDeleteReq, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableCreatePost(req: express.Request<never, PvpmartinsApi.TableCreateRes, PvpmartinsApi.TableCreateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.TableCreateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableReadPost(req: express.Request<never, PvpmartinsApi.TableReadRes, PvpmartinsApi.TableReadReq, never>, res: {
        send: (responseBody: PvpmartinsApi.TableReadRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableUpdatePost(req: express.Request<never, PvpmartinsApi.TableUpdateRes, PvpmartinsApi.TableUpdateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.TableUpdateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableDeletePost(req: express.Request<never, never, PvpmartinsApi.TableDeleteReq, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tablesReadPost(req: express.Request<never, PvpmartinsApi.TablesReadRes, PvpmartinsApi.ReadPaginationFilter, never>, res: {
        send: (responseBody: PvpmartinsApi.TablesReadRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableDataCreatePost(req: express.Request<never, PvpmartinsApi.TableDataCreateRes, PvpmartinsApi.TableDataCreateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.TableDataCreateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableDataReadPost(req: express.Request<never, PvpmartinsApi.TableDataReadRes, PvpmartinsApi.TableDataReadReq, never>, res: {
        send: (responseBody: PvpmartinsApi.TableDataReadRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableDataUpdatePost(req: express.Request<never, PvpmartinsApi.TableDataUpdateRes, PvpmartinsApi.TableDataUpdateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.TableDataUpdateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    tableDataDeletePost(req: express.Request<never, never, PvpmartinsApi.TableDataDeleteReq, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardCreatePost(req: express.Request<never, PvpmartinsApi.DashboardCreateRes, PvpmartinsApi.DashboardCreateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardCreateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardReadPost(req: express.Request<never, PvpmartinsApi.DashboardReadRes, PvpmartinsApi.DashboardReadReq, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardReadRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardUpdatePost(req: express.Request<never, PvpmartinsApi.DashboardUpdateRes, PvpmartinsApi.DashboardUpdateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardUpdateRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardDeletePost(req: express.Request<never, never, PvpmartinsApi.DashboardDeleteReq, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardGroupAuthCreatePost(req: express.Request<never, PvpmartinsApi.DashboardAuthGroup, PvpmartinsApi.AuthCreateBody, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardAuthGroup) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardGroupAuthReadPost(req: express.Request<never, PvpmartinsApi.DashboardAuthGroup, PvpmartinsApi.AuthReadBody, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardAuthGroup) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardGroupAuthUpdatePost(req: express.Request<never, PvpmartinsApi.DashboardAuthGroup, PvpmartinsApi.AuthUpdateBody, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardAuthGroup) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardGroupAuthDeletePost(req: express.Request<never, PvpmartinsApi.AuthDeleteBody, PvpmartinsApi.AuthDeleteBody, never>, res: {
        send: (responseBody: PvpmartinsApi.AuthDeleteBody) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    dashboardsReadPost(req: express.Request<never, PvpmartinsApi.DashboardsReadRes, PvpmartinsApi.DashboardsReadReq, never>, res: {
        send: (responseBody: PvpmartinsApi.DashboardsReadRes) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authGroupCreatePost(req: express.Request<never, PvpmartinsApi.AuthGroupRef, PvpmartinsApi.GroupCreateReq, never>, res: {
        send: (responseBody: PvpmartinsApi.AuthGroupRef) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authGroupReadPost(req: express.Request<never, PvpmartinsApi.AuthGroupRef, PvpmartinsApi.GroupReadBody, never>, res: {
        send: (responseBody: PvpmartinsApi.AuthGroupRef) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authGroupUpdatePost(req: express.Request<never, never, PvpmartinsApi.GroupUpdateReq, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authGroupDeletePost(req: express.Request<never, never, PvpmartinsApi.GroupDeleteReq, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authGroupsReadPost(req: express.Request<never, PvpmartinsApi.InlineResponse2001, PvpmartinsApi.ReadPaginationFilter, never>, res: {
        send: (responseBody: PvpmartinsApi.InlineResponse2001) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authUsersReadPost(req: express.Request<never, PvpmartinsApi.InlineResponse2002, PvpmartinsApi.ReadPaginationFilter, never>, res: {
        send: (responseBody: PvpmartinsApi.InlineResponse2002) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authUserCreatePost(req: express.Request<never, PvpmartinsApi.User, PvpmartinsApi.NewUser, never>, res: {
        send: (responseBody: PvpmartinsApi.User) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authUserUpdatePost(req: express.Request<never, never, PvpmartinsApi.UpdateUser, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authUserDeletePost(req: express.Request<never, never, PvpmartinsApi.DeleteUser, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    authUserReadPost(req: express.Request<never, PvpmartinsApi.User, PvpmartinsApi.UserReadBody, never>, res: {
        send: (responseBody: PvpmartinsApi.User) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class PontusService {
    private readonly methods;
    private router;
    constructor(methods: PontusServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
