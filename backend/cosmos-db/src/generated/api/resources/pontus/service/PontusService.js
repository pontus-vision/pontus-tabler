"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PontusService = void 0;
const express_1 = __importDefault(require("express"));
const serializers = __importStar(require("../../../../serialization"));
const errors = __importStar(require("../../../../errors"));
class PontusService {
    constructor(methods, middleware = []) {
        this.methods = methods;
        this.router = express_1.default.Router({ mergeParams: true }).use(express_1.default.json({
            strict: false,
        }), ...middleware);
    }
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.post("/menu/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.MenuCreateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.menuCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.MenuCreateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'menuCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/menu/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.MenuReadReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.menuReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.MenuReadRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'menuReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/menu/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.MenuUpdateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.menuUpdatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.MenuUpdateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'menuUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/menu/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.MenuDeleteReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.menuDeletePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'menuDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableCreateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TableCreateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableReadReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TableReadRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableUpdateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableUpdatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TableUpdateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableDeleteReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableDeletePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/tables/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.ReadPaginationFilter.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tablesReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TablesReadRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tablesReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/data/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableDataCreateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableDataCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TableDataCreateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableDataCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/data/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableDataReadReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableDataReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TableDataReadRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "UnauthorizedError":
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableDataReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/data/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableDataUpdateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableDataUpdatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.TableDataUpdateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableDataUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/table/data/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.TableDataDeleteReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.tableDataDeletePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'tableDataDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.DashboardCreateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardCreateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.DashboardReadReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardReadRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.DashboardUpdateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardUpdatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardUpdateRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.DashboardDeleteReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardDeletePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/group/auth/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.AuthCreateBody.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardGroupAuthCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardAuthGroup.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardGroupAuthCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/group/auth/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.AuthReadBody.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardGroupAuthReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardAuthGroup.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardGroupAuthReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/group/auth/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.AuthUpdateBody.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardGroupAuthUpdatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardAuthGroup.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardGroupAuthUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboard/group/auth/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.AuthDeleteBody.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardGroupAuthDeletePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.AuthDeleteBody.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardGroupAuthDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/dashboards/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.DashboardsReadReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.dashboardsReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.DashboardsReadRes.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'dashboardsReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/group/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.GroupCreateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authGroupCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.AuthGroupRef.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authGroupCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/group/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.GroupReadBody.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authGroupReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.AuthGroupRef.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authGroupReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/group/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.GroupUpdateReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authGroupUpdatePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authGroupUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/group/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.GroupDeleteReq.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authGroupDeletePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authGroupDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/groups/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.ReadPaginationFilter.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authGroupsReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.InlineResponse2001.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authGroupsReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/users/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.ReadPaginationFilter.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authUsersReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.InlineResponse2002.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authUsersReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/user/create", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.NewUser.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authUserCreatePost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.User.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authUserCreatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/user/update", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.UpdateUser.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authUserUpdatePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "BadRequestError":
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authUserUpdatePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/user/delete", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.DeleteUser.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authUserDeletePost(req, {
                        send: () => __awaiter(this, void 0, void 0, function* () {
                            res.sendStatus(204);
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "NotFoundError":
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authUserDeletePOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        this.router.post("/auth/user/read", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const request = yield serializers.UserReadBody.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    yield this.methods.authUserReadPost(req, {
                        send: (responseBody) => __awaiter(this, void 0, void 0, function* () {
                            res.json(yield serializers.User.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" }));
                        }),
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                }
                catch (error) {
                    console.error(error);
                    if (error instanceof errors.PvpmartinsApiError) {
                        switch (error.errorName) {
                            case "InternalServerError":
                                break;
                            default:
                                console.warn(`Endpoint 'authUserReadPOST' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition.");
                        }
                        yield error.send(res);
                    }
                    else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            }
            else {
                res.status(422).json({
                    errors: request.errors.map((error) => ["request", ...error.path].join(" -> ") + ": " + error.message),
                });
                next(request.errors);
            }
        }));
        return this.router;
    }
}
exports.PontusService = PontusService;
