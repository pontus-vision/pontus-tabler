services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-app
    ports:
      - "3000:3000"
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      COSMOSDB_NAME: pv_db
      AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: 127.0.0.1
      PORT: 5000
      JWT_SECRET_KEY: 2d49959562a7d8718d0370b09fd96d6f13b00af81fdf7d353aa96b1d975ba687
      REFRESH_JWT_SECRET_KEY: 5875bb587efd0b6aa7d00b6b37ec210941e0c05034afcd4e8d8680137c53d2dd
      ADMIN_PASSWORD: admin
      USER_PASSWORD: user
      DB_SOURCE: deltadb
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
      P_DELTA_TABLE_HIVE_SERVER: jdbc:hive2://delta-db:10000
      FERN_TOKEN: fern_ZD6VQEU7lX3IrebxoIsjYmLuolVUd8-N
    volumes:
      - .:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - delta-db 
    networks:
      - app-network
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        # npx fern generate 
        fern generate 
        # cd delta-table
        # npm i -g java --unsafe-perm
        # cd ..
        cd pontus-node-jdbc
        npm install
        cd ..
        cd delta-table/node
        export CLASSPATH="$(ls $(pwd)/jars/*|xargs|sed -e 's/ /,/g' )"
        cd -
        # sleep 1000000
        npm install
        # npm run jest
        cd pontus-node-jdbc/src
        node index.js
        

  delta-db:
    build:
      context: ./delta-table/docker/
      dockerfile: Dockerfile
    container_name: db-setup
    volumes:
      - ./delta-table/run-delta-jupyterlab.sh:/usr/local/bin/db-init.sh
      - ./delta-table/data:/data 
      - ./delta-table/work-dir:/opt/spark/work-dir
    networks:
      - app-network
    restart: "no"  # Ensures this runs once and exits
    ports:
      - "10000:10000"
        
networks:
  app-network:
    driver: bridge
