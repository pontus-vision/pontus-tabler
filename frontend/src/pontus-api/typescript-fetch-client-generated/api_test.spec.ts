/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: you@your-company.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("authGroupCreatePost", () => {
    const body: api.NewGroup = undefined
    return expect(instance.authGroupCreatePost(body, {})).resolves.toBe(null)
  })
  test("authGroupDeletePost", () => {
    const body: api.DeleteGroup = undefined
    return expect(instance.authGroupDeletePost(body, {})).resolves.toBe(null)
  })
  test("authGroupReadPost", () => {
    const body: api.GroupReadBody = undefined
    return expect(instance.authGroupReadPost(body, {})).resolves.toBe(null)
  })
  test("authGroupUpdatePost", () => {
    const body: api.UpdateGroup = undefined
    return expect(instance.authGroupUpdatePost(body, {})).resolves.toBe(null)
  })
  test("authGroupsReadPost", () => {
    const body: api.ReadPaginationFilter = undefined
    return expect(instance.authGroupsReadPost(body, {})).resolves.toBe(null)
  })
  test("authUserCreatePost", () => {
    const body: api.NewUser = undefined
    return expect(instance.authUserCreatePost(body, {})).resolves.toBe(null)
  })
  test("authUserDeletePost", () => {
    const body: api.DeleteUser = undefined
    return expect(instance.authUserDeletePost(body, {})).resolves.toBe(null)
  })
  test("authUserReadPost", () => {
    const body: api.UserReadBody = undefined
    return expect(instance.authUserReadPost(body, {})).resolves.toBe(null)
  })
  test("authUserUpdatePost", () => {
    const body: api.UpdateUser = undefined
    return expect(instance.authUserUpdatePost(body, {})).resolves.toBe(null)
  })
  test("authUsersReadPost", () => {
    const body: api.ReadPaginationFilter = undefined
    return expect(instance.authUsersReadPost(body, {})).resolves.toBe(null)
  })
  test("dashboardCreatePost", () => {
    const body: api.NewDashboard = undefined
    return expect(instance.dashboardCreatePost(body, {})).resolves.toBe(null)
  })
  test("dashboardDeletePost", () => {
    const body: api.DeleteDashboard = undefined
    return expect(instance.dashboardDeletePost(body, {})).resolves.toBe(null)
  })
  test("dashboardGroupAuthCreatePost", () => {
    const body: api.AuthCreateBody = undefined
    return expect(instance.dashboardGroupAuthCreatePost(body, {})).resolves.toBe(null)
  })
  test("dashboardGroupAuthDeletePost", () => {
    const body: api.AuthDeleteBody = undefined
    return expect(instance.dashboardGroupAuthDeletePost(body, {})).resolves.toBe(null)
  })
  test("dashboardGroupAuthReadPost", () => {
    const body: api.AuthReadBody = undefined
    return expect(instance.dashboardGroupAuthReadPost(body, {})).resolves.toBe(null)
  })
  test("dashboardGroupAuthUpdatePost", () => {
    const body: api.AuthUpdateBody = undefined
    return expect(instance.dashboardGroupAuthUpdatePost(body, {})).resolves.toBe(null)
  })
  test("dashboardReadPost", () => {
    const body: api.DashboardReadBody = undefined
    return expect(instance.dashboardReadPost(body, {})).resolves.toBe(null)
  })
  test("dashboardUpdatePost", () => {
    const body: api.UpdateDashboard = undefined
    return expect(instance.dashboardUpdatePost(body, {})).resolves.toBe(null)
  })
  test("dashboardsReadPost", () => {
    const body: api.ReadPaginationFilter = undefined
    return expect(instance.dashboardsReadPost(body, {})).resolves.toBe(null)
  })
  test("getTableData", () => {
    const body: api.AgGridInput = {
  "value" : {
    "dataType" : "Person_Natural",
    "filters" : [ {
      "colId" : "Person_Natural_Full_Name",
      "condition1" : {
        "filter" : "JO",
        "filterType" : "text",
        "type" : "contains"
      },
      "condition2" : {
        "filter" : "SE",
        "filterType" : "text",
        "type" : "contains"
      },
      "filterType" : "text",
      "operator" : "AND"
    } ],
    "from" : 0,
    "search" : {
      "cols" : [ {
        "field" : "Person_Natural_Full_Name",
        "filter" : true,
        "headerName" : "Full Name",
        "id" : "Person_Natural_Full_Name",
        "name" : "Full Name",
        "sortable" : true
      }, {
        "field" : "Person_Natural_Customer_ID",
        "filter" : true,
        "headerName" : "Customer ID",
        "id" : "Person_Natural_Customer_ID",
        "name" : "Customer ID",
        "sortable" : true
      } ],
      "extraSearch" : {
        "label" : "Person_Natural",
        "value" : "Person_Natural"
      },
      "searchExact" : true,
      "searchStr" : ""
    },
    "sortCol" : "Person_Natural_Full_Name",
    "sortDir" : "+asc",
    "to" : 100
  }
}
    return expect(instance.getTableData(body, {})).resolves.toBe(null)
  })
  test("menuPost", () => {
    return expect(instance.menuPost({})).resolves.toBe(null)
  })
  test("tableCreatePost", () => {
    const body: api.NewTable = {
  "value" : {
    "name" : "Person Natural",
    "cols" : [ {
      "field" : "Person_Natural_Full_Name",
      "filter" : true,
      "headerName" : "Full Name",
      "id" : "Person_Natural_Full_Name",
      "name" : "Full Name",
      "sortable" : true
    }, {
      "field" : "Person_Natural_Customer_ID",
      "filter" : true,
      "headerName" : "Customer ID",
      "id" : "Person_Natural_Customer_ID",
      "name" : "Customer ID",
      "sortable" : true
    } ]
  }
}
    return expect(instance.tableCreatePost(body, {})).resolves.toBe(null)
  })
  test("tableDataCreatePost", () => {
    const body: api.NewTableRow = {
  "value" : {
    "tableId" : "mapeamentoDeProcessos",
    "cols" : {
      "mapeamentoDeProcessoCol1" : "New value",
      "mapeamentoDeProcessoCol2" : "New value"
    }
  }
}
    return expect(instance.tableDataCreatePost(body, {})).resolves.toBe(null)
  })
  test("tableDataDeletePost", () => {
    const body: api.DeleteTableRow = {
  "value" : {
    "tableId" : "mapeamentoDeProcessos",
    "rowId" : 15
  }
}
    return expect(instance.tableDataDeletePost(body, {})).resolves.toBe(null)
  })
  test("tableDataUpdatePost", () => {
    const body: api.UpdateTableRow = {
  "value" : {
    "tableId" : "mapeamentoDeProcessos",
    "rowId" : 15,
    "cols" : {
      "mapeamentoDeProcessoCol1" : "Value Overwritten",
      "mapeamentoDeProcessoCol2" : "Value Overwritten"
    }
  }
}
    return expect(instance.tableDataUpdatePost(body, {})).resolves.toBe(null)
  })
  test("tableDeletePost", () => {
    const body: api.DeleteTable = undefined
    return expect(instance.tableDeletePost(body, {})).resolves.toBe(null)
  })
  test("tableReadPost", () => {
    const body: api.GetTable = {
  "value" : {
    "tableId" : "mapeamentoDeProcessos"
  }
}
    return expect(instance.tableReadPost(body, {})).resolves.toBe(null)
  })
  test("tableUpdatePost", () => {
    const body: api.UpdateTable = undefined
    return expect(instance.tableUpdatePost(body, {})).resolves.toBe(null)
  })
  test("tablesReadPost", () => {
    const body: api.ReadPaginationFilter = undefined
    return expect(instance.tablesReadPost(body, {})).resolves.toBe(null)
  })
})

