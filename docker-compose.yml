services:

  sql-app:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - delta-db
    environment:
      CLASSPATH: "/usr/src/app/delta-table/node/jars/*"
      JWT_SECRET_KEY: 2d49959562a7d8718d0370b09fd96d6f13b00af81fdf7d353aa96b1d975ba687
      REFRESH_JWT_SECRET_KEY: 5875bb587efd0b6aa7d00b6b37ec210941e0c05034afcd4e8d8680137c53d2dd
      ADMIN_PASSWORD: admin
      USER_PASSWORD: user
      DB_SOURCE: deltadb
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
      P_DELTA_TABLE_HIVE_SERVER: jdbc:hive2://delta-db:10000
      FERN_TOKEN: fern_ZD6VQEU7lX3IrebxoIsjYmLuolVUd8-N
      ENVIRONMENT_MODE: test
    volumes:
      - ./backend:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        export CLASSPATH="$(ls /usr/src/app/delta-table/node/jars/*|xargs|sed -e 's/ /,/g' )"
        npm install 
        cd fern
        fern generate
        cd ..
        cd sql-app
        npm install express cors
        cd fern
        fern generate
        cd ..
        timeout 1000 bash -c 'until nc -z delta-db 10000; do echo "Waiting for port 10000..."; sleep 1; done; echo "Port 10000 is open!"'
        npm run build
        ls src
        node dist/sql-app/src/server.js

  app-tests:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - delta-db
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      COSMOSDB_NAME: pv_db
      CLASSPATH: "/usr/src/app/delta-table/node/jars/*"
      AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: 127.0.0.1
      PORT: 5000
      JWT_SECRET_KEY: 2d49959562a7d8718d0370b09fd96d6f13b00af81fdf7d353aa96b1d975ba687
      REFRESH_JWT_SECRET_KEY: 5875bb587efd0b6aa7d00b6b37ec210941e0c05034afcd4e8d8680137c53d2dd
      ADMIN_PASSWORD: admin
      USER_PASSWORD: user
      DB_SOURCE: deltadb
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
      P_DELTA_TABLE_HIVE_SERVER: jdbc:hive2://delta-db:10000
      FERN_TOKEN: fern_ZD6VQEU7lX3IrebxoIsjYmLuolVUd8-N
      ENVIRONMENT_MODE: test
    volumes:
      - ./backend:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        timeout 1000 bash -c 'until nc -z node-app 8080; do echo "Waiting for port 8080 from app-tests..."; sleep 1; done; echo "app-tests: Port 8080 is open!"'
        echo "Checking if service is up on port 3001..."
        timeout 1000 bash -c 'until nc -z sql-app 3001; do echo "Waiting for port 3001..."; sleep 1; done; echo "Port 3001 is open!"'
        echo "RUNNING INTEGRATION TESTS"
        npm run jest --forceExit

  app:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: node-app
    ports:
      - "8080:8080"
    depends_on:
      - delta-db
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      COSMOSDB_NAME: pv_db
      CLASSPATH: "/usr/src/app/delta-table/node/jars/*"
      AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: 127.0.0.1
      PORT: 5000
      JWT_SECRET_KEY: 2d49959562a7d8718d0370b09fd96d6f13b00af81fdf7d353aa96b1d975ba687
      REFRESH_JWT_SECRET_KEY: 5875bb587efd0b6aa7d00b6b37ec210941e0c05034afcd4e8d8680137c53d2dd
      ADMIN_PASSWORD: admin
      USER_PASSWORD: user
      DB_SOURCE: deltadb
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
      P_DELTA_TABLE_HIVE_SERVER: jdbc:hive2://delta-db:10000
      FERN_TOKEN: fern_ZD6VQEU7lX3IrebxoIsjYmLuolVUd8-N
      ENVIRONMENT_MODE: test
    volumes:
      - ./backend:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/.X11-unix:/tmp/.X11-unix
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        #if [[ ! -f "src/generated/index.js" ]] ; then  fern generate ; fi
        #echo "Checking if service is up on port 10000..."
        timeout 1000 bash -c 'until nc -z delta-db 10000; do echo "Waiting for port 10000..."; sleep 1; done; echo "Port 10000 is open!"'
        cd database-management
        ./apply.sh
        cd ..
        #cd delta-table
        #npm i -g java --unsafe-perm
        #cd ..
        #npm install
        #cd pontus-node-jdbc
        #npm install
        #cd ..
        #export CLASSPATH="$(ls /usr/src/app/delta-table/node/jars/*|xargs|sed -e 's/ /,/g' )"
        #cd delta-table/node/node-jdbc
        #npm i
        #cd ..
        #npm install
        ## npm run jest
        #cd ../..
        #cd pontus-node-jdbc
        #npm run build
        ## npm run jest || true
        #cd /usr/src/app
        #chmod +x /usr/src/app/run-docker.sh
        #./run-docker.sh
        #source /usr/src/app/run-docker.sh
        #echo "CLASSPATH VARIABLE"
        #echo $CLASSPATH
        #echo 'LS'
        #ls
        #timeout 1000 bash -c 'until nc -z sql-app 3001; do echo "Waiting for port 3001..."; sleep 1; done; echo "Port 3001 is open!"'
        #sleep 100000
        #npm run build && node dist/src/server.js
        #       sleep 1000000

  delta-db:
    image: pontusvisiongdpr/pv-deltadb:latest
    #    build:
    #      context: ./backend/delta-table/docker/
    #      dockerfile: Dockerfile
    #user: "1001:1001"
    volumes:
      - ./backend/delta-table/data:/data
      - ./backend/delta-table/work-dir:/opt/spark/work-dir
      # - spark-workdir:/opt/spark/work-dir
    environment:
      - CLASSPATH=/opt/spark/jars/*
    ports:
      - "10000:10000"
      - "8888:8888"
    command:
      - sh
      - -c
      - |
        echo "MIGRATIONS"


  frontend-server:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "4173:4173"
      - "5173:5173"
    environment:
      VITE_BACKEND_URL: http://node-app:8080 # pointing to the backend
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
    volumes:
      - ./frontend:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.cache/Cypress:/root/.cache/Cypress
      #  depends_on:
      #    - app
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        VITE_BACKEND_URL=http://node-app:8080
        timeout 1000 bash -c 'until nc -z node-app 8080; do echo "Waiting for port 8080..."; sleep 1; done; echo "Port 8080 is open!"'
        echo "Checking if service is up on port 10000..."
        npm install
        sass src/sass/style.scss src/style.css
        npm run dev

  frontend-tests:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      FRONTEND_URL: http://frontend-server:5173 # pointing to the backend
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
      DELTA_DB: delta-db:10000 # pointing to the backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.cache/Cypress:/root/.cache/Cypress
      - .:/usr/src/app
      #  depends_on:
      #    - app
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        echo "Waiting for app-tests to finish..."
        while [ "$(docker inspect -f '{{.State.Running}}' app-tests)" == "true" ]; do
          sleep 2
        done
        echo "app-tests has exited. Running frontend tests..."
        cd frontend
        timeout 1000 bash -c 'until nc -z frontend-server 5173; do echo "Waiting for port 5173..."; sleep 1; done; echo "Port 5173 is open!"'
        echo "Checking if service is up on port 10000..."
        timeout 1000 bash -c 'until nc -z delta-db 10000; do echo "Waiting for port 10000..."; sleep 1; done; echo "Port 10000 is open!"'
        echo "LS DIST"
        ls dist/
        npm install
        #rm -Rf dist && npx tsc
        export CLASSPATH="$(ls /usr/src/app/backend/delta-table/node/jars/*|xargs|sed -e 's/ /,/g' )"
        # export DELTA_DB=delta-db:10000
        export FRONTEND_URL=http://frontend-server:5173
        sleep 100000
        npx cypress install
        npx cypress run -b chrome
        #sleep 10000

  webhook-receiver:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - app
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      COSMOSDB_NAME: pv_db
      CLASSPATH: "/usr/src/app/delta-table/node/jars/*"
      AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE: 127.0.0.1
      PORT: 5000
      JWT_SECRET_KEY: 2d49959562a7d8718d0370b09fd96d6f13b00af81fdf7d353aa96b1d975ba687
      REFRESH_JWT_SECRET_KEY: 5875bb587efd0b6aa7d00b6b37ec210941e0c05034afcd4e8d8680137c53d2dd
      ADMIN_PASSWORD: admin
      USER_PASSWORD: user
      DB_SOURCE: deltadb
      LD_LIBRARY_PATH: /usr/lib/jvm/java-1.17.0-openjdk-amd64/lib/server:/usr/lib/jvm/java-1.17.0-openjdk-amd64/lib
      P_DELTA_TABLE_HIVE_SERVER: jdbc:hive2://delta-db:10000
      FERN_TOKEN: fern_ZD6VQEU7lX3IrebxoIsjYmLuolVUd8-N
    volumes:
      - ./backend:/usr/src/app
    entrypoint:
      - /usr/bin/bash
      - -c
      - |
        cd webhook
        npm install express cors
        fern generate
        npm run build
        ls
        node dist/server.js
